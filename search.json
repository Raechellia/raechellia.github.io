[{"title":"AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE","url":"/2021/10/22/AN-IMAGE-IS-WORTH-16X16-WORDS-TRANSFORMERS-FOR-IMAGE-RECOGNITION-AT-SCALE/","content":"AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALEAuthor: Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, Neil Houlsby\nABSTRACTWhile the Transformer architecture has become the de-facto standard for natural language processing tasks, its applications to computer vision remain limited. In vision, attention is either applied in conjunction with convolutional networks, or used to replace certain components of convolutional networks while keeping their overall structure in place. We show that this reliance on CNNs is not necessary and a pure transformer applied directly to sequences of image patches can perform very well on image classification tasks. When pre-trained on large amounts of data and transferred to multiple mid-sized or small image recognition benchmarks (ImageNet, CIFAR-100, VTAB, etc.), Vision Transformer (ViT) attains excellent results compared to state-of-the-art convolutional networks while requiring substantially fewer computational resources to train.\n1 INTRODUCTIONSelf-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have become the model of choice in natural language processing (NLP). The dominant approach is to pre-train on a large text corpus and then fine-tune on a smaller task-specific dataset (Devlin et al., 2019). Thanks to Transformers’ computational efficiency and scalability, it has become possible to train models of unprecedented size, with over 100B parameters (Brown et al., 2020; Lepikhin et al., 2020). With the models and datasets growing, there is still no sign of saturating performance.\nIn computer vision, however, convolutional architectures remain dominant (LeCun et al., 1989; Krizhevsky et al., 2012; He et al., 2016). Inspired by NLP successes, multiple works try combining CNN-like architectures with self-attention (Wang et al., 2018; Carion et al., 2020), some replacing the convolutions entirely (Ramachandran et al., 2019; Wang et al., 2020a). The latter models, while theoretically efficient, have not yet been scaled effectively on modern hardware accelerators due to the use of specialized attention patterns. Therefore, in large-scale image recognition, classic ResNetlike architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al., 2020).\nInspired by the Transformer scaling successes in NLP, we experiment with applying a standard Transformer directly to images, with the fewest possible modifications. To do so, we split an image into patches and provide the sequence of linear embeddings of these patches as an input to a Transformer. Image patches are treated the same way as tokens (words) in an NLP application. We train the model on image classification in supervised fashion.\nWhen trained on mid-sized datasets such as ImageNet without strong regularization, these models yield modest accuracies of a few percentage points below ResNets of comparable size. This seemingly discouraging outcome may be expected: Transformers lack some of the inductive biases inherent to CNNs, such as translation equivariance and locality, and therefore do not generalize well when trained on insufficient amounts of data.\nHowever, the picture changes if the models are trained on larger datasets (14M-300M images). We find that large scale training trumps inductive bias. Our Vision Transformer (ViT) attains excellent results when pre-trained at sufficient scale and transferred to tasks with fewer datapoints. When pre-trained on the public ImageNet-21k dataset or the in-house JFT-300M dataset, ViT approaches or beats state of the art on multiple image recognition benchmarks. In particular, the best model reaches the accuracy of 88.55% on ImageNet, 90.72% on ImageNet-ReaL, 94.55% on CIFAR-100, and 77.63% on the VTAB suite of 19 tasks.\n2 RELATED WORKTransformers were proposed by Vaswani et al. (2017) for machine translation, and have since be-come the state of the art method in many NLP tasks. Large Transformer-based models are often pre-trained on large corpora and then fine-tuned for the task at hand: BERT (Devlin et al., 2019) uses a denoising self-supervised pre-training task, while the GPT line of work uses language modeling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020).\nNaive application of self-attention to images would require that each pixel attends to every other pixel. With quadratic cost in the number of pixels, this does not scale to realistic input sizes. Thus, to apply Transformers in the context of image processing, several approximations have been tried in the past. Parmar et al. (2018) applied the self-attention only in local neighborhoods for each query pixel instead of globally. Such local multi-head dot-product self attention blocks can completely replace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different line of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-attention in order to be applicable to images. An alternative way to scale attention is to apply it in blocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho et al., 2019; Wang et al., 2020a). Many of these specialized attention architectures demonstrate promising results on computer vision tasks, but require complex engineering to be implemented efficiently on hardware accelerators.\nMost related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2 × 2 from the input image and applies full self-attention on top. This model is very similar to ViT, but our work goes further to demonstrate that large scale pre-training makes vanilla transformers competitive with (or even better than) state-of-the-art CNNs. Moreover, Cordonnier et al. (2020) use a small patch size of 2 × 2 pixels, which makes the model applicable only to small-resolution images, while we handle medium-resolution images as well.\nThere has also been a lot of interest in combining convolutional neural networks (CNNs) with forms of self-attention, e.g. by augmenting feature maps for image classification (Bello et al., 2019) or by further processing the output of a CNN using self-attention, e.g. for object detection (Hu et al., 2018; Carion et al., 2020), video processing (Wang et al., 2018; Sun et al., 2019), image classification (Wu et al., 2020), unsupervised object discovery (Locatello et al., 2020), or unified text-vision tasks (Chen et al., 2020c; Lu et al., 2019; Li et al., 2019).\nAnother recent related model is image GPT (iGPT) (Chen et al., 2020a), which applies Transformers to image pixels after reducing image resolution and color space. The model is trained in an unsupervised fashion as a generative model, and the resulting representation can then be fine-tuned or probed linearly for classification performance, achieving a maximal accuracy of 72% on ImageNet.\nOur work adds to the increasing collection of papers that explore image recognition at larger scales than the standard ImageNet dataset. The use of additional data sources allows to achieve state-of-the-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020). Moreover, Sun et al. (2017) study how CNN performance scales with dataset size, and Kolesnikov et al. (2020); Djolonga et al. (2020) perform an empirical exploration of CNN transfer learning from large scale datasets such as ImageNet-21k and JFT-300M. We focus on these two latter datasets as well, but train Transformers instead of ResNet-based models used in prior works.\n3 METHOD\nFigure 1: Model overview. We split an image into fixed-size patches, linearly embed each of them, add position embeddings, and feed the resulting sequence of vectors to a standard Transformer encoder. In order to perform classification, we use the standard approach of adding an extra learnable “classification token” to the sequence. The illustration of the Transformer encoder was inspired by Vaswani et al. (2017).\n\nIn model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible. An advantage of this intentionally simple setup is that scalable NLP Transformer architectures – and their efficient implementations – can be used almost out of the box.\n3.1 VISION TRANSFORMER (VIT)An overview of the model is depicted in Figure 1. The standard Transformer receives as input a  sequence of token embeddings. To handle  images, we reshape the image  into a sequence of flattened  patches , where  is the resolution of the original image,Cisthenumberofchannels,(P,P)istheresolutionofeachimagepatch,and  is the resulting number of patches, which also serves as the effective input sequence length for the Transformer. The Transformer uses constant latent vector size  through all of its layers, so we flatten the patches and map to  dimensions with a trainable linear projection (Eq. 1). We refer to the output of this projection as the patch embeddings.\nclass Patches(tensorflow.keras.layers.Layer):    def __init__(self, patch_size):        super(Patches, self).__init__()        self.patch_size = patch_size    def call(self, images):        batch_size = tf.shape(images)[0]        patches = tf.image.extract_patches(            images = images,            sizes = [1, self.patch_size, self.patch_size, 1],            strides = [1, self.patch_size, self.patch_size, 1],            rates = [1, 1, 1, 1],            padding = 'VALID',        )        patch_dims = patches.shape[-1]        patches = tf.reshape(patches, [batch_size, -1, patch_dims])        return patches\n\nSimilar to BERT’s [class] token, we prepend a learnable embedding to the sequence of embedded patches (), whose state at the output of the Transformer encoder () serves as the image representation  (Eq. 4). Both during pre-training and fine-tuning, a classification head is attached to . The classification head is implemented by a MLP with one hidden layer at pre-training time and by a single linear layer at fine-tuning time.\nPosition embeddings are added to the patch embeddings to retain positional information. We use standard learnable  position embeddings, since we have not observed significant performance gains from using more advanced -aware position embeddings (Appendix D.4). The resulting sequence of embedding vectors serves as input to the encoder.\nclass PatchEncoder(tf.keras.layers.Layer):    def __init__(self, num_patches, projection_dim):        super(PatchEncoder, self).__init__()        self.num_patches = num_patches        self.projection = tf.keras.layers.Dense(units = projection_dim)        self.position_embedding = tf.keras.layers.Embedding(input_dim = num_patches, output_dim = projection_dim)    def call(self, patch):        positions = tf.range(start = 0, limit = self.num_patches, delta = 1)        encoded = self.projection(patch) + self.position_embedding(positions)        return encoded\n\nThe Transformer encoder (Vaswani et al., 2017) consists of alternating layers of multiheaded self-attention (MSA, see Appendix A) and MLP blocks (Eq. 2, 3). Layernorm (LN) is applied before every block, and residual connections after every block (Wang et al., 2019; Baevski &amp; Auli, 2019).\nThe MLP contains two layers with a GELU non-linearity.\n\nInductive bias. We note that Vision Transformer has much less image-specific inductive bias than CNNs. In CNNs, locality, two-dimensional neighborhood structure, and translation equivariance are baked into each layer throughout the whole model. In ViT, only MLP layers are local and translationally equivariant, while the self-attention layers are global. The two-dimensional neighborhood structure is used very sparingly: in the beginning of the model by cutting the image into patches and at fine-tuning time for adjusting the position embeddings for images of different resolution (as described below). Other than that, the position embeddings at initialization time carry no information about the  positions of the patches and all spatial relations between the patches have to be learned from scratch.\nHybrid Architecture. As an alternative to raw image patches, the input sequence can be formed from feature maps of a CNN (LeCun et al., 1989). In this hybrid model, the patch embedding projection  (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case, the patches can have spatial size 1x1, which means that the input sequence is obtained by simply flattening the spatial dimensions of the feature map and projecting to the Transformer dimension. The classification input embedding and position embeddings are added as described above.\n3.2 FINE-TUNING AND HIGHER RESOLUTIONTypically, we pre-train ViT on large datasets, and fine-tune to (smaller) downstream tasks. For this, we remove the pre-trained prediction head and attach a zero-initialized  feedforward layer, where  is the number of downstream classes. It is often beneficial to fine-tune at higher resolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020). When feeding images of higher resolution, we keep the patch size the same, which results in a larger effective sequence length. The Vision Transformer can handle arbitrary sequence lengths (up to memory constraints), however, the pre-trained position embeddings may no longer be meaningful. We therefore perform  interpolation of the pre-trained position embeddings, according to their location in the original image. Note that this resolution adjustment and patch extraction are the only points at which an inductive bias about the  structure of the images is manually injected into the Vision Transformer.\n4 EXPERIMENTSWe evaluate the representation learning capabilities of ResNet, Vision Transformer (ViT), and the hybrid. To understand the data requirements of each model, we pre-train on datasets of varying size and evaluate many benchmark tasks. When considering the computational cost of pre-training the model, ViT performs very favourably, attaining state of the art on most recognition benchmarks at a lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show that self-supervised ViT holds promise for the future.\n4.1 SETUPDatasets. To explore model scalability, we use the ILSVRC-2012 ImageNet dataset with 1k classes and 1.3M images (we refer to it as ImageNet in what follows), its superset ImageNet-21k with 21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and 303M high-resolution images. We de-duplicate the pre-training datasets w.r.t. the test sets of the downstream tasks following Kolesnikov et al. (2020). We transfer the models trained on these dataset to several benchmark tasks: ImageNet on the original validation labels and the cleaned-up ReaL labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al., 2012), and Oxford Flowers-102 (Nilsback &amp; Zisserman, 2008). For these datasets, pre-processing follows Kolesnikov et al. (2020).\n\n\n\nModel\nLayers\nHidden size D\nMLP size\nHeads\nParams\n\n\n\nViT-Base\n12\n768\n3072\n12\n86M\n\n\nViT-Large\n24\n1024\n4096\n16\n307M\n\n\nViT-Huge\n32\n1280\n5120\n16\n632M\n\n\nTable 1: Details of Vision Transformer model variants.\nWe also evaluate on the 19-task VTAB classification suite (Zhai et al., 2019b). VTAB evaluates low-data transfer to diverse tasks, using 1 000 training examples per task. The tasks are divided into three groups: Natural – tasks like the above, Pets, CIFAR, etc. Specialized – medical and satellite imagery, and Structured – tasks that require geometric understanding like localization.\nModel Variants. We base ViT configurations on those used for BERT (Devlin et al., 2019), as summarized in Table 1. The “Base” and “Large” models are directly adopted from BERT and we add the larger “Huge” model. In what follows we use brief notation to indicate the model size and the input patch size: for instance, ViT-L/16 means the “Large” variant with 16 × 16 input patch size. Note that the Transformer’s sequence length is inversely proportional to the square of the patch size, thus models with smaller patch size are computationally more expensive.\nFor the baseline CNNs, we use ResNet (He et al., 2016), but replace the Batch Normalization layers (Ioffe &amp; Szegedy, 2015) with Group Normalization (Wu &amp; He, 2018), and used standardized convolutions (Qiao et al., 2019). These modifications improve transfer (Kolesnikov et al., 2020), and we denote the modified model “ResNet (BiT)”. For the hybrids, we feed the intermediate feature maps into ViT with patch size of one “pixel”. To experiment with different sequence lengths, we either (i) take the output of stage 4 of a regular ResNet50 or (ii) remove stage 4, place the same number of layers in stage 3 (keeping the total number of layers), and take the output of this extended stage 3. Option (ii) results in a 4x longer sequence length, and a more expensive ViT model.\nTraining &amp; Fine-tuning. We train all models, including ResNets, using Adam (Kingma &amp; Ba, 2015) with β1 = 0.9, β2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which we found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common practices, Adam works slightly better than SGD for ResNets in our setting). We use a linear learning rate warmup and decay, see Appendix B.1 for details. For fine-tuning we use SGD with momentum, batch size 512, for all models, see Appendix B.1.1. For ImageNet results in Table 2, we fine-tuned at higher resolution: 512 for ViT-L/16 and 518 for ViT-H/14, and also used Polyak &amp; Juditsky (1992) averaging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b).\nMetrics. We report results on downstream datasets either through few-shot or fine-tuning accuracy. Fine-tuning accuracies capture the performance of each model after fine-tuning it on the respective dataset. Few-shot accuracies are obtained by solving a regularized least-squares regression problem that maps the (frozen) representation of a subset of training images to {−1, 1}K target vectors. This formulation allows us to recover the exact solution in closed form. Though we mainly focus on fine-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-fly evaluation where fine-tuning would be too costly.\n4.2 COMPARISON TO STATE OF THE ART\n\n\n\nOurs-JFT (ViT-H/14)\nOurs-JFT (ViT-L/16)\nOurs-I21k (ViT-L/16)\nBiT-L (ResNet152x4)\nNoisy Student (EfficientNet-L2)\n\n\n\nImageNet\n88.55 ± 0.04\n87.76 ± 0.03\n85.30 ± 0.02\n87.54 ± 0.02\n88.4/88.5∗\n\n\nImageNet ReaL\n90.72 ± 0.05\n90.54 ± 0.03\n88.62 ± 0.05\n90.54\n90.55\n\n\nCIFAR-10\n99.50 ± 0.06\n99.42 ± 0.03\n99.15 ± 0.03\n99.37 ± 0.06\n-\n\n\nCIFAR-100\n94.55 ± 0.04\n93.90 ± 0.05\n93.25 ± 0.05\n93.51 ± 0.08\n-\n\n\nOxford-IIIT Pets\n97.56 ± 0.03\n97.32 ± 0.11\n94.67 ± 0.15\n96.62 ± 0.23\n-\n\n\nOxford Flowers-102\n99.68 ± 0.02\n99.74 ± 0.00\n99.61 ± 0.02\n99.63 ± 0.03\n-\n\n\nVTAB (19 tasks)\n77.63 ± 0.23\n76.28 ± 0.46\n72.72 ± 0.21\n76.29 ± 1.70\n-\n\n\nTPUv3-core-days\n2.5k\n0.68k\n0.23k\n9.9k\n12.3k\n\n\nTable 2: Comparison with state of the art on popular image classification benchmarks. We report mean and standard deviation of the accuracies, averaged over three fine-tuning runs. Vision Transformer models pre-trained on the JFT-300M dataset outperform ResNet-based baselines on all datasets, while taking substantially less computational resources to pre-train. ViT pre-trained on the smaller public ImageNet-21k dataset performs well too. ∗Slightly improved 88.5% result reported in Touvron et al. (2020).\n\nFigure 2: Breakdown of VTAB performance in *Natural*, *Specialized*, and *Structured* task groups.\n\nWe first compare our largest models – ViT-H/14 and ViT-L/16 – to state-of-the-art CNNs from the literature. The first comparison point is Big Transfer (BiT) (Kolesnikov et al., 2020), which performs supervised transfer learning with large ResNets. The second is Noisy Student (Xie et al., 2020), which is a large EfficientNet trained using semi-supervised learning on ImageNet and JFT-300M with the labels removed. Currently, Noisy Student is the state of the art on ImageNet and BiT-L on the other datasets reported here. All models were trained on TPUv3 hardware, and we report the number of TPUv3-core-days taken to pre-train each of them, that is, the number of TPU v3 cores (2 per chip) used for training multiplied by the training time in days.\nTable 2 shows the results. The smaller ViT-L/16 model pre-trained on JFT-300M outperforms BiT-L (which is pre-trained on the same dataset) on all tasks, while requiring substantially less computational resources to train. The larger model, ViT-H/14, further improves the performance, especially on the more challenging datasets – ImageNet, CIFAR-100, and the VTAB suite. Interestingly, this model still took substantially less compute to pre-train than prior state of the art. However, we note that pre-training efficiency may be affected not only by the architecture choice, but also other parameters, such as training schedule, optimizer, weight decay, etc. We provide a controlled study of performance vs. compute for different architectures in Section 4.4. Finally, the ViT-L/16 model pre-trained on the public ImageNet-21k dataset performs well on most datasets too, while taking fewer resources to pre-train: it could be trained using a standard cloud TPUv3 with 8 cores in approximately 30 days.\nFigure 2 decomposes the VTAB tasks into their respective groups, and compares to previous SOTA methods on this benchmark: BiT, VIVI – a ResNet co-trained on ImageNet and Youtube (Tschannen et al., 2020), and S4L – supervised plus semi-supervised learning on ImageNet (Zhai et al., 2019a). ViT-H/14 outperforms BiT-R152x4, and other methods, on the Natural and Structured tasks. On the Specialized the performance of the top two models is similar.\n4.3 PRE-TRAINING DATA REQUIREMENTS\nFigure 3: Transfer to ImageNet. While large ViT models perform worse than BiT ResNets (shaded area) when pre-trained on small datasets, they shine when pre-trained on larger datasets. Similarly, larger ViT variants overtake smaller ones as the dataset grows.\n\n\nFigure 4: Linear few-shot evaluation on ImageNet versus pre-training size. ResNets perform better with smaller pre-training datasets but plateau sooner than ViT, which performs better with larger pre-training. ViT-b is ViT-B with all hidden dimensions halved.\n\n\nFigure 5: Performance versus pre-training compute for different architectures: Vision Transformers, ResNets, and hybrids. Vision Transformers generally outperform ResNets with the same computational budget. Hybrids improve upon pure Transformers for smaller model sizes, but the gap vanishes for larger models.\n\nThe Vision Transformer performs well when pre-trained on a large JFT-300M dataset. With fewer inductive biases for vision than ResNets, how crucial is the dataset size? We perform two series of experiments.\nFirst, we pre-train ViT models on datasets of increasing size: ImageNet, ImageNet-21k, and JFT-300M. To boost the performance on the smaller datasets, we optimize three basic regularization parameters – weight decay, dropout, and label smoothing. Figure 3 shows the results after finetuning to ImageNet (results on other datasets are shown in Table 5)2. When pre-trained on the smallest dataset, ImageNet, ViT-Large models underperform compared to ViT-Base models, despite (moderate) regularization. With ImageNet-21k pre-training, their performances are similar. Only with JFT-300M, do we see the full benefit of larger models. Figure 3 also shows the performance region spanned by BiT models of different sizes. The BiT CNNs outperform ViT on ImageNet, but with the larger datasets, ViT overtakes.\nSecond, we train our models on random subsets of 9M, 30M, and 90M as well as the full JFT-300M dataset. We do not perform additional regularization on the smaller subsets and use the same hyper-parameters for all settings. This way, we assess the intrinsic model properties, and not the effect of regularization. We do, however, use early-stopping, and report the best validation accuracy achieved during training. To save compute, we report few-shot linear accuracy instead of full finetuning accuracy. Figure 4 contains the results. Vision Transformers overfit more than ResNets with comparable computational cost on smaller datasets. For example, ViT-B/32 is slightly faster than ResNet50; it performs much worse on the 9M subset, but better on 90M+ subsets. The same is true for ResNet152x2 and ViT-L/16. This result reinforces the intuition that the convolutional inductive bias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from data is sufficient, even beneficial.\nOverall, the few-shot results on ImageNet (Figure 4), as well as the low-data results on VTAB (Table 2) seem promising for very low-data transfer. Further analysis of few-shot properties of ViT is an exciting direction of future work.\n4.4 SCALING STUDYWe perform a controlled scaling study of different models by evaluating transfer performance from JFT-300M. In this setting data size does not bottleneck the models’ performances, and we assess performance versus pre-training cost of each model. The model set includes: 7 ResNets, R50x1, R50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained for 14 epochs; 6 Vision Transformers, ViT-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus L/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+ViT-B/32, B/16, L/32, L/16 pretrained for 7 epochs, plus R50+ViT-L/16 pre-trained for 14 epochs (for hybrids, the number at the end of the model name stands not for the patch size, but for the total dowsampling ratio in the ResNet backbone).\nFigure 5 contains the transfer performance versus total pre-training compute (see Appendix D.5 for details on computational costs). Detailed results per model are provided in Table 6 in the Appendix. A few patterns can be observed. First, Vision Transformers dominate ResNets on the performance/compute trade-off. ViT uses approximately 2 − 4× less compute to attain the same performance (average over 5 datasets). Second, hybrids slightly outperform ViT at small computational budgets, but the difference vanishes for larger models. This result is somewhat surprising, since one might expect convolutional local feature processing to assist ViT at any size. Third, Vision Transformers appear not to saturate within the range tried, motivating future scaling efforts.\n4.5 INSPECTING VISION TRANSFORMER\nFigure 6: Representative examples of attenetion from the output token to the input space. See Appendix D.7 for details.\n\nTo begin to understand how the Vision Transformer processes image data, we analyze its internal representations. The first layer of the Vision Transformer linearly projects the flattened patches into a lower-dimensional space (Eq. 1). Figure 7 (left) shows the top principal components of the the learned embedding filters. The components resemble plausible basis functions for a low-dimensional representation of the fine structure within each patch.\nAfter the projection, a learned position embedding is added to the patch representations. Figure 7 (center) shows that the model learns to encode distance within the image in the similarity of position embeddings, i.e. closer patches tend to have more similar position embeddings. Further, the row-column structure appears; patches in the same row/column have similar embeddings. Finally, a sinusoidal structure is sometimes apparent for larger grids (Appendix D). That the position embeddings learn to represent 2D image topology explains why hand-crafted 2D-aware embedding variants do not yield improvements (Appendix D.4).\nSelf-attention allows ViT to integrate information across the entire image even in the lowest layers. We investigate to what degree the network makes use of this capability. Specifically, we compute the average distance in image space across which information is integrated, based on the attention weights (Figure 7, right). This “attention distance” is analogous to receptive field size in CNNs. We find that some heads attend to most of the image already in the lowest layers, showing that the ability to integrate information globally is indeed used by the model. Other attention heads have consistently small attention distances in the low layers. This highly localized attention is less pronounced in hybrid models that apply a ResNet before the Transformer (Figure 7, right), suggesting that it may serve a similar function as early convolutional layers in CNNs. Further, the attention distance increases with network depth. Globally, we find that the model attends to image regions that are semantically relevant for classification (Figure 6).\n4.6 SELF-SUPERVISIONFigure 7: Left: Filters of the initial linear embedding of RGB values of ViT-L/32. Center: Similarity of position embeddings of ViT-L/32. Tiles show the cosine similarity between the position embedding of the patch with the indicated row and column and the position embeddings of all other patches. Right: Size of attended area by head and network depth. Each dot shows the mean attention distance across images for one of 16 heads at one layer. See Appendix D.7 for details.\nTransformers show impressive performance on NLP tasks. However, much of their success stems not only from their excellent scalability but also from large scale self-supervised pre-training (Devlin et al., 2019; Radford et al., 2018). We also perform a preliminary exploration on masked patch prediction for self-supervision, mimicking the masked language modeling task used in BERT. With self-supervised pre-training, our smaller ViT-B/16 model achieves 79.9% accuracy on ImageNet, a significant improvement of 2% to training from scratch, but still 4% behind supervised pre-training. Appendix B.1.2 contains further details. We leave exploration of contrastive pre-training (Chen et al., 2020b; He et al., 2020; Bachman et al., 2019; He ́naff et al., 2020) to future work.\n5 CONCLUSIONWe have explored the direct application of Transformers to image recognition. Unlike prior works using self-attention in computer vision, we do not introduce image-specific inductive biases into the architecture apart from the initial patch extraction step. Instead, we interpret an image as a sequence of patches and process it by a standard Transformer encoder as used in NLP. This simple, yet scalable, strategy works surprisingly well when coupled with pre-training on large datasets. Thus, Vision Transformer matches or exceeds the state of the art on many image classification datasets, whilst being relatively cheap to pre-train.\nWhile these initial results are encouraging, many challenges remain. One is to apply ViT to other computer vision tasks, such as detection and segmentation. Our results, coupled with those in Carion et al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self-supervised pre-training methods. Our initial experiments show improvement from self-supervised pre-training, but there is still large gap between self-supervised and large-scale supervised pretraining. Finally, further scaling of ViT would likely lead to improved performance.\n","categories":["Paper Reading"]},{"title":"Generative Adversarial Nets","url":"/2020/06/10/Generative-Adversarial-Nets/","content":"Generative Adversarial Netsauthor: Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, Yoshua Bengio\nAbstractWe propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model  that captures the data distribution, and a discriminative model  that estimates the probability that a sample came from the training data rather than . The training procedure for  is to maximize the probability of  making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions  and , a unique solution exists, with  recovering the training data distribution and  equal to 21 everywhere. In the case where  and  are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.\n1 IntroductionThe promise of deep learning is to discover rich, hierarchical models that represent probability distributions over the kinds of data encountered in artificial intelligence applications, such as natural images, audio waveforms containing speech, and symbols in natural language corpora. So far, the most striking successes in deep learning have involved discriminative models, usually those that map a high-dimensional, rich sensory input to a class label. These striking successes have primarily been based on the backpropagation and dropout algorithms, using piecewise linear units  which have a particularly well-behaved gradient . Deep generative models have had less of an impact, due to the difficulty of approximating many intractable probabilistic computations that arise in maximum likelihood estimation and related strategies, and due to difficulty of leveraging the benefits of piecewise linear units in the generative context. We propose a new generative model estimation procedure that sidesteps these difficulties.\nIn the proposed adversarial nets framework, the generative model is pitted against an adversary:a discriminative model that learns to determine whether a sample is from the model distribution or the data distribution. The generative model can be thought of as analogous to a team of counterfeiters, trying to produce fake currency and use it without detection, while the discriminative model is analogous to the police, trying to detect the counterfeit currency. Competition in this game drives both teams to improve their methods until the counterfeits are indistiguishable from the genuine articles.\nThis framework can yield specific training algorithms for many kinds of model and optimization algorithm. In this article, we explore the special case when the generative model generates samples by passing random noise through a multilayer perceptron, and the discriminative model is also a multilayer perceptron. We refer to this special case as adversarial nets. In this case, we can train both models using only the highly successful backpropagation and dropout algorithms and sample from the generative model using only forward propagation. No approximate inference or Markov chains are necessary.\n2 Related workAn alternative to directed graphical models with latent variables are undirected graphical models with latent variables, such as restricted Boltzmann machines (RBMs) , deep Boltzmann machines (DBMs) and their numerous variants. The interactions within such models are represented as the product of unnormalized potential functions, normalized by a global summa- tion/integration over all states of the random variables. This quantity (the partition function) and its gradient are intractable for all but the most trivial instances, although they can be estimated by Markov chain Monte Carlo (MCMC) methods. Mixing poses a significant problem for learning algorithms that rely on MCMC.\nDeep belief networks (DBNs) are hybrid models containing a single undirected layer and sev- eral directed layers. While a fast approximate layer-wise training criterion exists, DBNs incur the computational difficulties associated with both undirected and directed models.\nAlternative criteria that do not approximate or bound the log-likelihood have also been proposed, such as score matching and noise-contrastive estimation (NCE). Both of these require the learned probability density to be analytically specified up to a normalization constant. Note that in many interesting generative models with several layers of latent variables (such as DBNs and DBMs), it is not even possible to derive a tractable unnormalized probability density. Some models such as denoising auto-encoders and contractive autoencoders have learning rules very similar to score matching applied to RBMs. In NCE, as in this work, a discriminative training criterion is employed to fit a generative model. However, rather than fitting a separate discriminative model, the generative model itself is used to discriminate generated data from samples a fixed noise distribution. Because NCE uses a fixed noise distribution, learning slows dramatically after the model has learned even an approximately correct distribution over a small subset of the observed variables.\nFinally, some techniques do not involve defining a probability distribution explicitly, but rather train a generative machine to draw samples from the desired distribution. This approach has the advantage that such machines can be designed to be trained by back-propagation. Prominent recent work in this area includes the generative stochastic network (GSN) framework , which extends generalized denoising auto-encoders: both can be seen as defining a parameterized Markov chain, i.e., one learns the parameters of a machine that performs one step of a generative Markov chain. Compared to GSNs, the adversarial nets framework does not require a Markov chain for sampling. Because adversarial nets do not require feedback loops during generation, they are better able to leverage piecewise linear units , which improve the performance of backpropagation but have problems with unbounded activation when used ina feedback loop. More recent examples of training a generative machine by back-propagating into it include recent work on auto-encoding variational Bayes and stochastic backpropagation.\n3 Adversarial netsThe adversarial modeling framework is most straightforward to apply when the models are both multilayer perceptrons. To learn the generator’s distribution pg over data , we define a prior on input noise variables , then represent a mapping to data space as , where  is a differentiable function represented by a multilayer perceptron with parameters  . We also define a second multilayer perceptron  that outputs a single scalar.  represents the probability that x came from the data rather than . We train  to maximize the probability of assigning the correct label to both training examples and samples from . We simultaneously train  to minimize :\nIn other words,  and  play the following two-player minimax game with value function :\n\nIn the next section, we present a theoretical analysis of adversarial nets, essentially showing that the training criterion allows one to recover the data generating distribution as  and  are given enough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical explanation of the approach. In practice, we must implement the game using an iterative, numerical approach. Optimizing  to completion in the inner loop of training is computationally prohibitive, and on finite datasets would result in overfitting. Instead, we alternate between  steps of optimizing  and one step of optimizing . This results in  being maintained near its optimal solution, so long as  changes slowly enough. This strategy is analogous to the way that SML/PCD training maintains samples from a Markov chain from one learning step to the next in order to avoid burning in a Markov chain as part of the inner loop of learning. The procedure is formally presented in Algorithm 1.\nIn practice, equation 1 may not provide sufficient gradient for  to learn well. Early in learning, when  is poor,  can reject samples with high confidence because they are clearly different from the training data. In this case,  saturates. Rather than training  to minimize  we can train  to maximize . This objective function results in the same fixed point of the dynamics of  and  but provides much stronger gradients early in learning.\n \nFigure 1: Generative adversarial nets are trained by simultaneously updating the discriminative distribution (, blue, dashed line) so that it discriminates between samples from the data generating distribution (black, dotted line)  from those of the generative distribution  (green, solid line). The lower horizontal line is the domain from which  is sampled, in this case uniformly. The horizontal line above is part of the domain of . The upward arrows show how the mapping  imposes the non-uniform distribution  on transformed samples.  contracts in regions of high density and expands in regions of low density of  . (a) Consider an adversarial pair near convergence:  is similar to pdata and  is a partially accurate classifier. (b) In the inner loop of the algorithm  is trained to discriminate samples from data, converging to . (c) After an update to , gradient of  has guided  to flow to regions that are more likely  to be classified as data. (d) After several steps of training, if  and  have enough capacity, they will reach a point at which both cannot improve because . The discriminator is unable to differentiate between the two distributions, i.e. .\n4 Theoretical ResultsThe generator  implicitly defines a probability distribution  as the distribution of the samples  obtained when . Therefore, we would like Algorithm 1 to converge to a good estimator of , if given enough capacity and training time. The results of this section are done in a nonparametric setting, e.g. we represent a model with infinite capacity by studying convergence in the space of probability density functions.\nWe will show in section 4.1 that this minimax game has a global optimum for . We will then show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.\n\n\n\nAlgorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of steps to apply to the discriminator, k, is a hyperparameter. We used k = 1, the least expensive option, in our experiments.\n\n\n\nfor number of training iterations do….for k steps do……..• Sample minibatch of m noise samples  from noise prior .……..• Sample minibatch of m examples  from data generating distribution……..• Update the discriminator by ascending its stochastic gradient:……..….end for….• Sample minibatch of m noise samples  from noise prior .….• Update the generator by descending its stochastic gradient:….end forThe gradient-based updates can use any standard gradient-based learning rule. We used momentum in our experiments.\n\n\n4.1 Global Optimality of We first consider the optimal discriminator D for any given generator G.\nProposition 1. For G fixed, the optimal discriminator D is\n\nProof. The training criterion for the discriminator D, given any generator G, is to maximize the quantity V (G, D)\n\nFor any , the function  achieves its maximum in [0,1] at a . The discriminator does not need to be defined outside of , concluding the proof.\nNote that the training objective for  can be interpreted as maximizing the log-likelihood for estimating the conditional probability , where  indicates whether  comes from  (with ) or from  (with ). The minimax game in Eq. 1 can now be reformulated as:\n$\\begin{aligned} C(G) &amp;=\\max {D} V(G, D) \\ &amp;=\\mathbb{E}{\\boldsymbol{x} \\sim p_{\\text {data }}}\\left[\\log D_{G}^{}(\\boldsymbol{x})\\right]+\\mathbb{E}{\\boldsymbol{z} \\sim p{\\boldsymbol{z}}}\\left[\\log \\left(1-D_{G}^{}(G(\\boldsymbol{z}))\\right)\\right] \\ &amp;\\left.=\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}} \\log D_{G}^{}(\\boldsymbol{x})\\right]+\\mathbb{E}{\\boldsymbol{x} \\sim p{g}}\\left[\\log \\left(1-D_{G}^{}(\\boldsymbol{x})\\right)\\right] \\ &amp;=\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}}\\left[\\log \\frac{p_{\\text {data }}(\\boldsymbol{x})}{P_{\\text {data }}(\\boldsymbol{x})+p_{g}(\\boldsymbol{x})}\\right]+\\mathbb{E}{\\boldsymbol{x} \\sim p{g}}\\left[\\log \\frac{p_{g}(\\boldsymbol{x})}{p_{\\text {data }}(\\boldsymbol{x})+p_{g}(\\boldsymbol{x})}\\right] \\end{aligned}$\nTheorem 1. The global minimum of the virtual training criterion  is achieved if and only if . Atthatpoint,*C(G)*achieves the value .\nProof. For  ,  , (consider Eq. 2). Hence, by inspecting Eq. 4 at , we find . To see that this is the best possible value of , reached only for , observe that\n\nand that by subtracting this expression from , we obtain:\n\nwhere KL is the Kullback–Leibler divergence. We recognize in the previous expression the Jensen Shannon divergence between the model’s distribution and the data generating process:\n\nSince the Jensen–Shannon divergence between two distributions is always non-negative and zero only when they are equal, we have shown that  is the global minimum of  and that the only solution is ,i.e.,the generative model perfectly replicating the data generating process.\n4.2 Convergence of Algorithm 1\nProposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator is allowed to reach its optimum given G*, and*  is updated so as to improve the criterion\n\nthen  converges to \nProof. Consider  as a function of pg as done in the above criterion. Note that  is convex in pg. The subderivatives of a supremum of convex functions include the derivative of the function at the point where the maximum is attained. In other words, if  and  is convex in x for every , then  if . This is equivalent to computing a gradient descent update for pg at the optimal  given the corresponding .  is convex in  with a unique global optima as proven in Thm 1, therefore with sufficiently small updates of ,  converges to , concluding the proof.\nIn practice, adversarial nets represent a limited family of  distributions via the function , and we optimize  rather than  itself. Using a multilayer perceptron to define  introduces multiple critical points in parameter space. However, the excellent performance of multilayer perceptrons in practice suggests that they are a reasonable model to use despite their lack of theoretical guarantees.\n5 ExperimentsWe trained adversarial nets an a range of datasets including MNIST, the Toronto Face Database (TFD), and CIFAR-10. The generator nets used a mixture of rectifier linear activations and sigmoid activations, while the discriminator net used maxout activations. Dropout was applied in training the discriminator net. While our theoretical framework permits the use of dropout and other noise at intermediate layers of the generator, we used noise as the input to only the bottommost layer of the generator network.\nWe estimate probability of the test set data under pg by fitting a Gaussian Parzen window to the samples generated with G and reporting the log-likelihood under this distribution. The σ parameter of the Gaussians was obtained by cross validation on the validation set. This procedure was intro- duced in Breuleux et al. and used for various generative models for which the exact likelihood is not tractable [25, 3, 5]. Results are reported in Table 1. This method of estimating the likelihood has somewhat high variance and does not perform well in high dimensional spaces but it is the best method available to our knowledge. Advances in generative models that can sample but not estimate likelihood directly motivate further research into how to evaluate such models.\n\n\n\nModel\nMNIST\nTFD\n\n\n\nDBN\n138 ± 2\n1909 ± 66\n\n\nStacked CAE\n121 ± 1.6\n2110 ± 50\n\n\nDeep GSN\n214 ± 1.1\n1890 ± 29\n\n\nAdversarial nets\n225 ± 2\n2057 ± 26\n\n\nTable 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean log- likelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we computed the standard error across folds of the dataset, with a different σ chosen using the validation set of each fold. On TFD, σ was cross validated on each fold and mean log-likelihood on each fold were computed. For MNIST we compare against other models of the real-valued (rather than binary) version of dataset.\nIn Figures 2 and 3 we show samples drawn from the generator net after training. While we make no claim that these samples are better than samples generated by existing methods, we believe that these samples are at least competitive with the better generative models in the literature and highlight the potential of the adversarial framework.\n\nFigure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of the neighboring sample, in order to demonstrate that the model has not memorized the training set. Samples are fair random draws, not cherry-picked. Unlike most other visualizations of deep generative models, these images show actual samples from the model distributions, not conditional means given samples of hidden units. Moreover, these samples are uncorrelated because the sampling process does not depend on Markov chain mixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator and “deconvolutional” generator)\n\nFigure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.\n\n\n\n\nDeep directed graphical models\nDeep undirected graphical models\nGenerative autoencoders\nAdversarial models\n\n\n\nTraining\nInference needed during training.\nInference needed during training. MCMC needed to approximate partition function gradient.\nEnforced tradeoff between mixing and power of reconstruction generation\nSynchronizing the discriminator with the generator. Helvetica.\n\n\nInference\nLearned approximate inference\nVariational inference\nMCMC-based inference\nLearned approximate inference\n\n\nSampling\nNo difficulties\nRequires Markov chain\nRequires Markov chain\nNo difficulties\n\n\nEvaluating p(x)\nIntractable, may be approximated with AIS\nIntractable, may be approximated with AIS\nNot explicitly represented, may be approximated with Parzen density estimation\nNot explicitly represented, may be approximated with Parzen density estimation\n\n\nModel design\nNearly all models  incur extreme\nCareful design needed to ensure multiple properties\nAny differentiable function is theoretically permitted\nAny differentiable function is theoretically permitted\n\n\nTable 2: Challenges in generative modeling: a summary of the difficulties encountered by different approaches to deep generative modeling for each of the major operations involving a model.\n6 Advantages and disadvantagesThis new framework comes with advantages and disadvantages relative to previous modeling frame- works. The disadvantages are primarily that there is no explicit representation of , and that  must be synchronized well with  during training (in particular,  must not be trained too much without updating , in order to avoid “the Helvetica scenario” in which  collapses too many values of  to the same value of  to have enough diversity to model pdata), much as the negative chains of a Boltzmann machine must be kept up to date between learning steps. The advantages are that Markov chains are never needed, only backprop is used to obtain gradients, no inference is needed during learning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes the comparison of generative adversarial nets with other generative modeling approaches.\nThe aforementioned advantages are primarily computational. Adversarial models may also gain some statistical advantage from the generator network not being updated directly with data examples, but only with gradients flowing through the discriminator. This means that components of the input are not copied directly into the generator’s parameters. Another advantage of adversarial net- works is that they can represent very sharp, even degenerate distributions, while methods based on Markov chains require that the distribution be somewhat blurry in order for the chains to be able to mix between modes.\n7 Conclusions and future workThis framework admits many straightforward extensions:\n\nA conditional generative model  can be obtained by adding c as input to both  and .\nLearned approximate inference can be performed by training an auxiliary network to predict  given . This is similar to the inference net trained by the wake-sleep algorithm but with the advantage that the inference net may be trained for a fixed generator net after the generator net has finished training.\nOne can approximately model all conditionals  where  is a subset of the indices of  by training a family of conditional models that share parameters. Essentially, one can use adversarial nets to implement a stochastic extension of the deterministic MP-DBM.\nSemi-supervised learning: features from the discriminator or inference net could improve perfor- mance of classifiers when limited labeled data is available.\nEfficiency improvements: training could be accelerated greatly by divising better methods for coordinating  and  or determining better distributions to sample  from during training.\n\nThis paper has demonstrated the viability of the adversarial modeling framework, suggesting that these research directions could prove useful.\n","categories":["Paper Reading"]},{"title":"Swin Transformer","url":"/2021/10/30/Swin-Transformer/","content":"Swin Transformer: Hierarchical Vision Transformer using Shifted WindowsAuthor: Ze Liu, Yutong Lin, Yue Cao, Han Hu, Yixuan Wei, Zheng Zhang, Stephen Lin, Baining Guo\nAbstractThis paper presents a new vision Transformer, called Swin Transformer, that capably serves as a general-purpose backbone for computer vision. Challenges in adapting Transformer from language to vision arise from differences between the two domains, such as large variations in the scale of visual entities and the high resolution of pixels in images compared to words in text. To address these differences, we propose a hierarchical Transformer whose representation is computed with Shifted windows. The shifted windowing scheme brings greater efficiency by limiting self-attention computation to non-overlapping local windows while also allowing for cross-window connection. This hierarchical architecture has the flexibility to model at various scales and has linear computational complexity with respect to image size. These qualities of Swin Transformer make it compatible with a broad range of vision tasks, including image classification (87.3 top-1 accuracy on ImageNet-1K) and dense prediction tasks such as object detection (58.7 box AP and 51.1 mask AP on COCO test-dev) and semantic segmentation (53.5 mIoU on ADE20K val). Its performance surpasses the previous state-of-the-art by a large margin of +2.7 box AP and +2.6 mask AP on COCO, and +3.2 mIoU on ADE20K, demonstrating the potential of Transformer-based models as vision backbones. The hierarchical design and the shifted window approach also prove beneficial for all-MLP architectures. The code and models are publicly available at https://github.com/microsoft/Swin-Transformer.\n1. IntroductionFigure 1. (a) The proposed Swin Transformer builds hierarchical feature maps by merging image patches (shown in gray) in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window (shown in red). It can thus serve as a general-purpose backbone for both image classification and dense recognition tasks. (b) In contrast, previous vision Transformers produce feature maps of a single low resolution and have quadratic computation complexity to input image size due to computation of self-attention globally.\nModeling in computer vision has long been dominated by convolutional neural networks (CNNs). Beginning with AlexNet and its revolutionary performance on the ImageNet image classification challenge, CNN architectures have evolved to become increasingly powerful through greater scale, more extensive connections, and more sophisticated forms of convolution. With CNNs serving as backbone networks for a variety of vision tasks, these architectural advances have led to performance improvements that have broadly lifted the entire field.\nOn the other hand, the evolution of network architectures in natural language processing (NLP) has taken a different path, where the prevalent architecture today is instead the Transformer. Designed for sequence modeling and transduction tasks, the Transformer is notable for its use of attention to model long-range dependencies in the data. Its tremendous success in the language domain has led researchers to investigate its adaptation to computer vision, where it has recently demonstrated promising results on certain tasks, specifically image classification and joint vision-language modeling.\nIn this paper, we seek to expand the applicability of Transformer such that it can serve as a general-purpose backbone for computer vision, as it does for NLP and as CNNs do in vision. We observe that significant challenges in transferring its high performance in the language domain to the visual domain can be explained by differences between the two modalities. One of these differences involves scale. Unlike the word tokens that serve as the basic elements of processing in language Transformers, visual elements can vary substantially in scale, a problem that receives attention in tasks such as object detection. In existing Transformer-based models, tokens are all of a fixed scale, a property unsuitable for these vision applications. Another difference is the much higher resolution of pixels in images compared to words in passages of text. There exist many vision tasks such as semantic segmentation that require dense prediction at the pixel level, and this would be intractable for Transformer on high-resolution images, as the computational complexity of its self-attention is quadratic to image size. To overcome these issues, we propose a generalpurpose Transformer backbone, called Swin Transformer, which constructs hierarchical feature maps and has linear computational complexity to image size. As illustrated in Figure 1(a), Swin Transformer constructs a hierarchical representation by starting from small-sized patches (outlined in gray) and gradually merging neighboring patches in deeper Transformer layers. With these hierarchical feature maps, the Swin Transformer model can conveniently leverage advanced techniques for dense prediction such as feature pyramid networks (FPN) or U-Net. The linear computational complexity is achieved by computing self-attention locally within non-overlapping windows that partition an image (outlined in red). The number of patches in each window is fixed, and thus the complexity becomes linear to image size. These merits make Swin Transformer suitable as a general-purpose backbone for various vision tasks, in contrast to previous Transformer based architectures which produce feature maps of a single resolution and have quadratic complexity.\n\nFigure 2. An illustration of the *shifted window* approach for computing self-attention in the proposed Swin Transformer architecture. In layer l (left), a regular window partitioning scheme is adopted, and self-attention is computed within each window. In the next layer l + 1 (right), the window partitioning is shifted, resulting in new windows. The self-attention computation in the new windows crosses the boundaries of the previous windows in layer l, providing connections among them.\n\nA key design element of Swin Transformer is its shift of the window partition between consecutive self-attention layers, as illustrated in Figure 2. The shifted windows bridge the windows of the preceding layer, providing connections among them that significantly enhance modeling power (see Table 4). This strategy is also efficient in regards to real-world latency: all query patches within a window share the same key set, which facilitates memory access in hardware. In contrast, earlier sliding window based self-attention approaches suffer from low latency on general hardware due to different key sets for different query pixels. Our experiments show that the proposed shifted window approach has much lower latency than the sliding window method, yet is similar in modeling power (see Tables 5 and 6). The shifted window approach also proves beneficial for all-MLP architectures.\nThe proposed Swin Transformer achieves strong performance on the recognition tasks of image classification, object detection and semantic segmentation. It outperforms the ViT / DeiT and ResNe(X)t models significantly with similar latency on the three tasks. Its 58.7 box AP and 51.1 mask AP on the COCO test-dev set surpass the previous state-of-the-art results by +2.7 box AP (Copy-paste without external data) and +2.6 mask AP (DetectoRS). On ADE20K semantic segmentation, it obtains 53.5 mIoU on the val set, an improvement of +3.2 mIoU over the previous state-of-the-art (SETR). It also achieves a top-1 accuracy of 87.3% on ImageNet-1K image classification.\nIt is our belief that a unified architecture across computer vision and natural language processing could benefit both fields, since it would facilitate joint modeling of visual and textual signals and the modeling knowledge from both domains can be more deeply shared. We hope that Swin Transformer’s strong performance on various vision problems can drive this belief deeper in the community and encourage unified modeling of vision and language signals.\n2. Related WorkCNN and variants CNNs serve as the standard network model throughout computer vision. While the CNN has existed for several decades, it was not until the introduction of AlexNet that the CNN took off and became mainstream. Since then, deeper and more effective convolutional neural architectures have been proposed to further propel the deep learning wave in computer vision, e.g., VGG, GoogleNet, ResNet, DenseNet, HRNet, and EfficientNet. In addition to these architectural advances, there has also been much work on improving individual convolution layers, such as depthwise convolution and deformable convolution. While the CNN and its variants are still the primary backbone architectures for computer vision applications, we highlight the strong potential of Transformer-like architectures for unified modeling between vision and language. Our work achieves strong performance on several basic visual recognition tasks, and we hope it will contribute to a modeling shift.\nSelf-attention based backbone architectures Also inspired by the success of self-attention layers and Transformer architectures in the NLP field, some works employ self-attention layers to replace some or all of the spatial convolution layers in the popular ResNet. In these works, the self-attention is computed within a local window of each pixel to expedite optimization, and they achieve slightly better accuracy/FLOPs trade-offs than the counterpart ResNet architecture. However, their costly memory access causes their actual latency to be significantly larger than that of the convolutional networks. Instead of using sliding windows, we propose to shift windows between consecutive layers, which allows for a more efficient implementation in general hardware.\nSelf-attention/Transformers to complement CNNs Another line of work is to augment a standard CNN architecture with self-attention layers or Transformers. The self-attention layers can complement backbones or head networks by providing the capability to encode distant dependencies or heterogeneous interactions. More recently, the encoder-decoder design in Transformer has been applied for the object detection and instance segmentation tasks. Our work explores the adaptation of Transformers for basic visual feature extraction and is complementary to these works.\nTransformer based vision backbones Most related to our work is the Vision Transformer (ViT) and its follow-ups. The pioneering work of ViT directly applies a Transformer architecture on nonoverlapping medium-sized image patches for image classification. It achieves an impressive speed-accuracy tradeoff on image classification compared to convolutional networks. While ViT requires large-scale training datasets (i.e., JFT-300M) to perform well, DeiT introduces several training strategies that allow ViT to also be effective using the smaller ImageNet-1K dataset. The results of ViT on image classification are encouraging, but its architecture is unsuitable for use as a general-purpose backbone network on dense vision tasks or when the input image resolution is high, due to its low-resolution feature maps and the quadratic increase in complexity with image size. There are a few works applying ViT models to the dense vision tasks of object detection and semantic segmentation by direct upsampling or deconvolution but with relatively lower performance. Concurrent to our work are some that modify the ViT architecture for better image classification. Empirically, we find our Swin Transformer architecture to achieve the best speedaccuracy trade-off among these methods on image classification, even though our work focuses on general-purpose performance rather than specifically on classification. Another concurrent work explores a similar line of thinking to build multi-resolution feature maps on Transformers. Its complexity is still quadratic to image size, while ours is linear and also operates locally which has proven beneficial in modeling the high correlation in visual signals. Our approach is both efficient and effective, achieving state-of-the-art accuracy on both COCO object detection and ADE20K semantic segmentation.\n3. Method3.1. Overall Architecture\nFigure 3. (a) The architecture of a Swin Transformer (Swin-T); (b) two successive Swin Transformer Blocks (notation presented with Eq. (3)). W-MSA and SW-MSA are multi-head self attention modules with regular and shifted windowing configurations, respectively.\n\nAn overview of the Swin Transformer architecture is presented in Figure 3, which illustrates the tiny version (Swin-T). It first splits an input RGB image into non-overlapping patches by a patch splitting module, like ViT. Each patch is treated as a “token” and its feature is set as a concatenation of the raw pixel RGB values. In our implementation, we use a patch size of  and thus the feature dimension of each patch is . Alinearembeddinglayerisapplied on this raw-valued feature to project it to an arbitrary dimension (denoted as C ).\nSeveral Transformer blocks with modified self-attention computation (Swin Transformer blocks) are applied on these patch tokens. The Transformer blocks maintain the number oftokens(),andtogetherwiththelinearembedding are referred to as “Stage 1”.\nclass PatchExtract(tf.keras.layers.Layer):    def __init__(self, patch_size, **kwargs):        super(PatchExtract, self).__init__(**kwargs)        self.patch_size_x = patch_size[0]        self.patch_size_y = patch_size[0]    def call(self, images):        batch_size = tf.shape(images)[0]        patches = tf.image.extract_patches(            images=images,            sizes=(1, self.patch_size_x, self.patch_size_y, 1),            strides=(1, self.patch_size_x, self.patch_size_y, 1),            rates=(1, 1, 1, 1),            padding=\"VALID\",        )        patch_dim = patches.shape[-1]        patch_num = patches.shape[1]        return tf.reshape(patches, (batch_size, patch_num * patch_num, patch_dim))\n\nclass PatchEmbedding(tf.keras.layers.Layer):    def __init__(self, num_patch, embed_dim, **kwargs):        super(PatchEmbedding, self).__init__(**kwargs)        self.num_patch = num_patch        self.proj = tf.keras.layers.Dense(embed_dim)        self.pos_embed = tf.keras.layers.Embedding(input_dim=num_patch, output_dim=embed_dim)    def call(self, patch):        pos = tf.range(start=0, limit=self.num_patch, delta=1)        return self.proj(patch) + self.pos_embed(pos)\n\nTo produce a hierarchical representation, the number of tokens is reduced by patch merging layers as the network gets deeper. The first patch merging layer concatenates the features of each group of  neighboring patches, and applies a linear layer on the 4C-dimensional concatenated features. This reduces the number of tokens by a multiple of  (2× downsampling of resolution), and the output dimension is set to . Swin Transformer blocks are applied afterwards for feature transformation, with the resolution kept at  . This first block of patch merging and feature transformation is denoted as “Stage 2”. The procedure is repeated twice, as “Stage 3” and “Stage 4”, with output resolutions of   and   , respectively.  These stages jointly produce a hierarchical representation, with the same feature map resolutions as those of typical convolutional networks, e.g., VGG and ResNet. As a result, the proposed architecture can conveniently replace the backbone networks in existing methods for various vision tasks.\nSwin Transformer block Swin Transformer is built by replacing the standard multi-head self attention (MSA) module in a Transformer block by a module based on shifted windows (described in Section 3.2), with other layers kept the same. As illustrated in Figure 3(b), a Swin Transformer block consists of a shifted window based MSA module, followed by a 2-layer MLP with GELU nonlinearity in between. A LayerNorm (LN) layer is applied before each MSA module and each MLP, and a residual connection is applied after each module.\nclass SwinTransformer(tf.keras.layers.Layer):    def __init__(self, dim, num_patch, num_heads, window_size=7, shift_size=0, num_mlp=1024, qkv_bias=True, dropout_rate=0.0, **kwargs,):        super(SwinTransformer, self).__init__(**kwargs)        self.dim = dim        self.num_patch = num_patch        self.num_heads = num_heads        self.window_size = window_size        self.shift_size = shift_size        self.num_mlp = num_mlp        self.norm1 = tf.keras.layers.LayerNormalization(epsilon=1e-5)        self.attn = WindowAttention(dim, window_size=(self.window_size, self.window_size), num_heads=num_heads, qkv_bias=qkv_bias, dropout_rate=dropout_rate,)        self.drop_path = DropPath(dropout_rate)        self.norm2 = tf.keras.layers.LayerNormalization(epsilon=1e-5)        self.mlp = tf.keras.Sequential(            [                tf.keras.layers.Dense(num_mlp),                tf.keras.layers.Activation(tf.keras.activations.gelu),                tf.keras.layers.Dropout(dropout_rate),                tf.keras.layers.Dense(dim),                tf.keras.layers.Dropout(dropout_rate),            ]        )        if min(self.num_patch) &lt; self.window_size:            self.shift_size = 0            self.window_size = min(self.num_patch)    def build(self, input_shape):        if self.shift_size == 0:            self.attn_mask = None        else:            height, width = self.num_patch            h_slices = (                slice(0, -self.window_size),                slice(-self.window_size, -self.shift_size),                slice(-self.shift_size, None),            )            w_slices = (                slice(0, -self.window_size),                slice(-self.window_size, -self.shift_size),                slice(-self.shift_size, None),            )            mask_array = np.zeros((1, height, width, 1))            count = 0            for h in h_slices:                for w in w_slices:                    mask_array[:, h, w, :] = count                    count += 1            mask_array = tf.convert_to_tensor(mask_array)            mask_windows = window_partition(mask_array, self.window_size)            mask_windows = tf.reshape(mask_windows, shape=[-1, self.window_size * self.window_size])            attn_mask = tf.expand_dims(mask_windows, axis=1) - tf.expand_dims(mask_windows, axis=2)            attn_mask = tf.where(attn_mask != 0, -100.0, attn_mask)            attn_mask = tf.where(attn_mask == 0, 0.0, attn_mask)            self.attn_mask = tf.Variable(initial_value=attn_mask, trainable=False)    def call(self, x):        height, width = self.num_patch        _, num_patches_before, channels = x.shape        x_skip = x        x = self.norm1(x)        x = tf.reshape(x, shape=(-1, height, width, channels))        if self.shift_size &gt; 0:            shifted_x = tf.roll(x, shift=[-self.shift_size, -self.shift_size], axis=[1, 2])        else:            shifted_x = x        x_windows = window_partition(shifted_x, self.window_size)        x_windows = tf.reshape(x_windows, shape=(-1, self.window_size * self.window_size, channels))        attn_windows = self.attn(x_windows, mask=self.attn_mask)        attn_windows = tf.reshape(attn_windows, shape=(-1, self.window_size, self.window_size, channels))        shifted_x = window_reverse(attn_windows, self.window_size, height, width, channels)        if self.shift_size &gt; 0:            x = tf.roll(shifted_x, shift=[self.shift_size, self.shift_size], axis=[1, 2])        else:            x = shifted_x        x = tf.reshape(x, shape=(-1, height * width, channels))        x = self.drop_path(x)        x = x_skip + x        x_skip = x        x = self.norm2(x)        x = self.mlp(x)        x = self.drop_path(x)        x = x_skip + x        return x\n\n\n\n3.2. Shifted Window based Self-AttentionThe standard Transformer architecture and its adaptation for image classification both conduct global self-attention, where the relationships between a token and all other tokens are computed. The global computation leads to quadratic complexity with respect to the number of tokens, making it unsuitable for many vision problems requiring an immense set of tokens for dense prediction or to represent a high-resolution image.\nSelf-attention in non-overlapped windows For efficient modeling, we propose to compute self-attention within local windows. The windows are arranged to evenly partition the image in a non-overlapping manner. Supposing each window contains  patches, the computational complexity of a global MSA module and a window based one on an image of  patches are:\n\nwhere the former is quadratic to patch number , and the latter is linear when  is fixed (set to 7 by default). Global self-attention computation is generally unaffordable for a large hw, while the window based self-attention is scalable.\nShifted window partitioning in successive blocks The window-based self-attention module lacks connections across windows, which limits its modeling power. To introduce cross-window connections while maintaining the efficient computation of non-overlapping windows, we propose a shifted window partitioning approach which alternates between two partitioning configurations in consecutive Swin Transformer blocks.\nAs illustrated in Figure 2, the first module uses a regular window partitioning strategy which starts from the top-left pixel, and the  feature map is evenly partitioned into  windows of size ().Then,thenextmodule adopts a windowing configuration that is shifted from that of the preceding layer, by displacing the windows by (, ) pixels from the regularly partitioned windows.\nWith the shifted window partitioning approach, consecutive Swin Transformer blocks are computed as\n\nwhere  and  denote the output features of the (S)W-MSA module and the MLP module for block l, respectively; W-MSA and SW-MSA denote window based multi-head self-attention using regular and shifted window partitioning confifigurations, respectively. \nThe shifted window partitioning approach introduces connections between neighboring non-overlapping win dows in the previous layer and is found to be effective in im age classifification, object detection, and semantic segmentation, as shown in Table 4.\n\nFigure 4. Illustration of an efficient batch computation approach for self-attention in shifted window partitioning.\n\nEfficient batch computation for shifted configuration An issue with shifted window partitioning is that it will result in more windows, from  to  in the shifted configuration, and some of the windows will be smaller than . A naive solution is to pad the smaller windows to a size of  and mask out the padded values when computing attention. When the number of windows in regular partitioning is small, e.g. , the increased computation with this naive solution is considerable (, which is 2.25 times greater). Here, we propose a more efficient batch computation approach by cyclic-shifting toward the top-left direction, as illustrated in Figure 4. After this shift, a batched window may be composed of several sub-windows that are not adjacent in the feature map, so a masking mechanism is employed to limit self-attention computation to within each sub-window. With the cyclic-shift, the number of batched windows remains the same as that of regular window partitioning, and thus is also efficient. The low latency of this approach is shown in Table 5.\nRelative position bias In computing self-attention, we follow by including a relative position bias  to each head in computing similarity:\n\nwhere , ,  trices; d is the query/key dimension, and  is the number of patches in a window. Since the relative position along each axis lies in the range , we parameterize a smaller-sized bias matrix , and values in  are taken from .\nWe observe significant improvements over counterparts without this bias term or that use absolute position embedding, as shown in Table 4. Further adding absolute position embedding to the input as in drops performance slightly, thus it is not adopted in our implementation.\nThe learnt relative position bias in pre-training can be also used to initialize a model for fine-tuning with a different window size through bi-cubic interpolation.\n3.3. Architecture VariantsWe build our base model, called Swin-B, to have of model size and computation complexity similar to ViT-B/DeiT-B. We also introduce Swin-T, Swin-S and Swin-L, which are versions of about 0.25×, 0.5× and 2× the model size and computational complexity, respectively. Note that the complexity of Swin-T and Swin-S are similar to those of ResNet-50 (DeiT-S) and ResNet-101, respectively. The window size is set to  by default. The query dimension of each head is , and the expansion layer of each MLP is , for all experiments. The architecture hyper-parameters of these model variants are:\n• Swin-T: , layer numbers = • Swin-S: , layer numbers = • Swin-B: , layer numbers = • Swin-L: , layer numbers = \nwhere  is the channel number of the hidden layers in the first stage. The model size, theoretical computational complexity (FLOPs), and throughput of the model variants for ImageNet image classification are listed in Table 1.\n4. ExperimentsWe conduct experiments on ImageNet-1K image classification, COCO object detection, and ADE20K semantic segmentation. In the following, we first compare the proposed Swin Transformer architecture with the previous state-of-the-arts on the three tasks. Then, we ablate the important design elements of Swin Transformer.\n4.1. Image Classification on ImageNet-1KSettings For image classification, we benchmark the proposed Swin Transformer on ImageNet-1K, which contains 1.28M training images and 50K validation images from 1,000 classes. The top-1 accuracy on a single crop is reported. We consider two training settings:\n• Regular ImageNet-1K training. This setting mostly follows. We employ an AdamW optimizer for 300 epochs using a cosine decay learning rate scheduler and 20 epochs of linear warm-up. A batch size of 1024, an initial learning rate of 0.001, and a weight decay of 0.05 are used. We include most of the augmentation and regularization strategies of in training, except for repeated augmentation and EMA, which do not enhance performance. Note that this is contrary to  where repeated augmentation is crucial to stabilize the training of ViT.\n• Pre-training on ImageNet-22K and fine-tuning on ImageNet-1K. We also pre-train on the larger ImageNet-22K dataset, which contains 14.2 million images and 22K classes. We employ an AdamW optimizer for 90 epochs using a linear decay learning rate scheduler with a 5-epoch linear warm-up. A batch size of 4096, an initial learning rate of 0.001, and a weight decay of 0.01 are used. In ImageNet-1K fine-tuning, we train the models for 30 epochs with a batch size of 1024, a constant learning rate of 10−5, and a weight decay of 10−8 .\nResults with regular ImageNet-1K training Table 1(a) presents comparisons to other backbones, including both Transformer-based and ConvNet-based, using regular ImageNet-1K training.\nCompared to the previous state-of-the-art Transformer-based architecture, i.e. DeiT, Swin Transformers noticeably surpass the counterpart DeiT architectures with similar complexities: +1.5% for Swin-T (81.3%) over DeiT-S (79.8%) using 2242 input, and +1.5%/1.4% for Swin-B (83.3%/84.5%) over DeiT-B (81.8%/83.1%) using 2242/3842 input, respectively.\nCompared with the state-of-the-art ConvNets, i.e. Reg-Net and EfficientNet, the Swin Transformer achieves a slightly better speed-accuracy trade-off. Noting that while RegNet and EfficientNet are obtained via a thorough architecture search, the proposed Swin Transformer is adapted from the standard Transformer and has strong potential for further improvement.\nResults with ImageNet-22K pre-training We also pretrain the larger-capacity Swin-B and Swin-L on ImageNet-22K. Results fine-tuned on ImageNet-1K image classification are shown in Table 1(b). For Swin-B, the ImageNet-22K pre-training brings 1.8%∼1.9% gains over training on ImageNet-1K from scratch. Compared with the previous best results for ImageNet-22K pre-training, our models achieve significantly better speed-accuracy trade-offs: Swin-B obtains 86.4% top-1 accuracy, which is 2.4% higher than that of ViT with similar inference throughput (84.7 vs. 85.9 images/sec) and slightly lower FLOPs (47.0G vs. 55.4G). The larger Swin-L model achieves 87.3% top-1 accuracy, +0.9% better than that of the Swin-B model.\n(a) Regular ImageNet-1K trained models\n\n\n\nmethod\nimage size\n#param.\nFLOPs\nthroughput(image/s)\nImageNet top-1 acc.\n\n\n\nRegNetY-4G\n\n21M\n4.0G\n1156.7\n80.0\n\n\nRegNetY-8G\n\n39M\n8.0G\n591.6\n81.7\n\n\nRegNetY-16G\n\n84M\n16.0G\n334.7\n82.9\n\n\nEffNet-B3\n\n12M\n1.8G\n732.1\n81.6\n\n\nEffNet-B4\n\n19M\n4.2G\n349.4\n82.9\n\n\nEffNet-B5\n\n30M\n9.9G\n169.1\n83.6\n\n\nEffNet-B6\n\n43M\n19.0G\n96.9\n84.0\n\n\nEffNet-B7\n\n66M\n37.0G\n55.1\n84.3\n\n\nViT-B/16\n\n86M\n55.4G\n85.9\n77.9\n\n\nViT-L/16\n\n307M\n190.7G\n27.3\n76.5\n\n\nDeiT-S\n\n22M\n4.6G\n940.4\n79.8\n\n\nDeiT-B\n\n86M\n17.5G\n292.3\n81.8\n\n\nDeiT-B\n\n86M\n55.4G\n85.9\n83.1\n\n\nSwin-T\n\n29M\n4.5G\n755.2\n81.3\n\n\nSwin-S\n\n50M\n8.7G\n436.9\n83.0\n\n\nSwin-B\n\n88M\n15.4G\n278.1\n83.5\n\n\nSwin-B\n\n88M\n47.0G\n84.7\n84.5\n\n\n(b) ImageNet-22K \n\n\n\nmethod\nimage size\n#param.\nFLOPs\nthroughput(image/s)\nImageNet top-1 acc.\n\n\n\nR-101x3\n\n388M\n204.6G\n-\n84.4\n\n\nR-152x4\n\n937M\n840.5G\n-\n85.4\n\n\nViT-B/16\n\n86M\n55.4G\n85.9\n84.0\n\n\nViT-L/16\n\n307M\n190.7G\n27.3\n85.2\n\n\nSwin-B\n\n88M\n15.4G\n278.1\n85.2\n\n\nSwin-B\n\n88M\n47.0G\n84.7\n86.4\n\n\nSwin-L\n\n197M\n103.9G\n42.1\n87.3\n\n\nTable 1. Comparison of different backbones on ImageNet-1K classification. Throughput is measured using the GitHub repository of and a V100 GPU, following.\n4.2. Object Detection on COCOSettings Object detection and instance segmentation experiments are conducted on COCO 2017, which contains 118K training, 5K validation and 20K test-dev images. An ablation study is performed using the validation set, and a system-level comparison is reported on test-dev. For the ablation study, we consider four typical object detection frameworks: Cascade Mask R-CNN, ATSS, RepPoints v2, and Sparse RCNN in mmdetection. For these four frameworks, we utilize the same settings: multi-scale training (resizing the input such that the shorter side is between 480 and 800 while the longer side is at most 1333), AdamW optimizer (initial learning rate of 0.0001, weight decay of 0.05, and batch size of 16), and 3x schedule (36 epochs). For system-level comparison, we adopt an improved HTC  (denoted as HTC++) with instaboost, stronger multi-scale training, 6x schedule (72 epochs), soft-NMS, and ImageNet-22K pre-trained model as initialization.\nWe compare our Swin Transformer to standard ConvNets, i.e. ResNe(X)t, and previous Transformer networks, e.g. DeiT. The comparisons are conducted by changing only the backbones with other settings unchanged. Note that while Swin Transformer and ResNe(X)t are directly applicable to all the above frameworks because of their hierarchical feature maps, DeiT only produces a single resolution of feature maps and cannot be directly applied. For fair comparison, we follow to construct hierarchical feature maps for DeiT using deconvolution layers.\n(a) Various frameworks\n\n\n\nMethod\nBackbone\n\n\n\n#param.\nFLOPs\nFPS\n\n\n\nCascade\nR-50\n46.3\n64.3\n50.5\n82M\n739G\n18.0\n\n\nMask R-CNN\nSwin-T\n50.5\n69.3\n54.9\n86M\n745G\n15.3\n\n\nATSS\nR-50\n43.5\n61.9\n47.0\n32M\n205G\n28.3\n\n\nATSS\nSwin-T\n47.2\n66.5\n51.3\n36M\n215G\n22.3\n\n\nRepPointsV2\nR-50\n46.5\n64.6\n50.3\n42M\n274G\n13.6\n\n\nRepPointsV2\nSwin-T\n50.0\n68.5\n54.2\n45M\n283G\n12.0\n\n\nSparse\nR-50\n44.5\n63.4\n48.2\n106M\n166G\n21.0\n\n\nR-CNN\nSwin-T\n47.0\n67.3\n52.3\n110M\n172G\n18.4\n\n\n(b) Various backbones w. Cascade Mask R-CNN\n\n\n\n\n\n\n\n\n\n\nparam\nFLOPs\nFPS\n\n\n\nDeiT-S\n48.0\n67.2\n51.7\n41.4\n64.2\n44.3\n82M\n739G\n18.0\n\n\nR50\n46.3\n64.3\n50.5\n40.1\n61.7\n43.4\n82M\n739G\n18.0\n\n\nSwin-T\n50.5\n69.3\n54.9\n43.7\n66.6\n47.1\n86M\n745G\n15.3\n\n\nX101-32\n48.1\n66.5\n52.4\n41.6\n63.9\n45.2\n101M\n819G\n12.8\n\n\nSwin-S\n51.8\n70.4\n56.3\n44.7\n67.9\n48.5\n107M\n838G\n12.0\n\n\nX101-64\n48.3\n66.4\n52.3\n41.7\n64.0\n45.1\n140M\n972G\n10.4\n\n\nSwin-B\n51.9\n70.9\n56.5\n45.0\n68.4\n48.7\n145M\n982G\n11.6\n\n\n​\t(c) System-level Comparison\n\n\n\nMethod\n\n\n\n\n#param.\nFLOPs\n\n\n\nRepPointsV2*\n-\n-\n52.1\n-\n-\n-\n\n\nGCNet*\n51.8\n44.7\n52.3\n45.4\n-\n1041G\n\n\nRelationNet++*\n-\n-\n52.7\n-\n-\n-\n\n\nSpineNet-190\n52.6\n-\n52.8\n-\n164M\n1885G\n\n\nResNeSt-200*\n52.5\n-\n53.3\n471.\n-\n-\n\n\nEfficientDet-D7\n54.4\n-\n55.1\n-\n77M\n410G\n\n\nDetectoRS*\n-\n-\n55.7\n48.6\n-\n-\n\n\nYOLOv4 P7*\n-\n-\n55.8\n-\n-\n-\n\n\nCopy-paste\n55.9\n47.2\n56.0\n47.4\n185M\n1440G\n\n\nX101-64 (HTC++)\n52.3\n46.0\n-\n-\n155M\n1033G\n\n\nSwin-B (HTC++)\n56.4\n49.1\n-\n-\n160M\n1043G\n\n\nSwin-L(HTC++)\n57.1\n49.5\n57.7\n50.2\n284M\n1470G\n\n\nSwin-L(HTC++)*\n58.0\n50.4\n58,.7\n51.1\n284M\n-\n\n\nTable 2. Results on COCO object detection and instance segmentation. denotes that additional decovolution layers are used to produce hierarchical feature maps.  indicates multi-scale testing.\nComparison to ResNe(X)t Table 2(a) lists the results of Swin-T and ResNet-50 on the four object detection frameworks. Our Swin-T architecture brings consistent +3.4∼4.2 box AP gains over ResNet-50, with slightly larger model size, FLOPs and latency.\nTable 2(b) compares Swin Transformer and ResNe(X)tunder different model capacity using Cascade Mask R-CNN. Swin Transformer achieves a high detection accuracy of 51.9 box AP and 45.0 mask AP, which are significant gains of +3.6 box AP and +3.3 mask AP over ResNeXt101-64x4d, which has similar model size, FLOPs and latency. On a higher baseline of 52.3 box AP and 46.0 mask AP using an improved HTC framework, the gains by Swin Transformer are also high, at +4.1 box AP and +3.1 mask AP (see Table 2(c)). Regarding inference speed, while ResNe(X)t is built by highly optimized Cudnn functions, our architecture is implemented with built-in PyTorch functions that are not all well-optimized. A thorough kernel optimization is beyond the scope of this paper.\nComparison to DeiT The performance of DeiT-S using the Cascade Mask R-CNN framework is shown in Table 2(b). The results of Swin-T are +2.5 box AP and +2.3 mask AP higher than DeiT-S with similar model size (86M vs. 80M) and significantly higher inference speed (15.3 FPS vs. 10.4 FPS). The lower inference speed of DeiT is mainly due to its quadratic complexity to input image size.\nComparison to previous state-of-the-art Table 2(c) compares our best results with those of previous state-of-the-art models. Our best model achieves 58.7 box AP and 51.1 mask AP on COCO test-dev, surpassing the previous best results by +2.7 box AP (Copy-paste without external data) and +2.6 mask AP (DetectoRS).\n4.3. Semantic Segmentation on ADE20KSettings ADE20K is a widely-used semantic segmentation dataset, covering a broad range of 150 semantic categories. It has 25K images in total, with 20K for training, 2K for validation, and another 3K for testing. We utilize UperNet in mmseg as our base framework for its high efficiency. More details are presented in the Appendix.\n\n\n\nADE20K Method\nADE20K Backbone\nval mIoU\ntest score\n#param.\nFLOPs\nFPS\n\n\n\nDANet\nResNet-101\n45.2\n-\n69M\n1119G\n15.2\n\n\nDLab.v3+\nResNet-101\n44.1\n-\n63M\n1021G\n16.0\n\n\nACNet\nResNet-101\n45.9\n38.5\n-\n-\n-\n\n\nDNL\nResNet-101\n46.0\n56.2\n69M\n1249G\n14.8\n\n\nOCRNet\nResNet-101\n45.3\n56.0\n56M\n923G\n19.3\n\n\nUperNet\nResNet-101\n44.9\n-\n86M\n1029G\n20.1\n\n\nOCRNet\nHRNet-w48\n45.7\n-\n71M\n664G\n12.5\n\n\nDLab.v3+\nResNeSt-101\n46.9\n55.1\n66M\n1051G\n11.9\n\n\nDLab.v3+\nResNeSt-200\n48.4\n-\n88M\n1381G\n8.1\n\n\nSETR\nT-Large\n50.3\n61.7\n308M\n-\n-\n\n\nUperNet\nDeiT-S\n44.0\n-\n52M\n1099G\n16.2\n\n\nUperNet\nSwin-T\n46.1\n-\n60M\n945G\n18.5\n\n\nUperNet\nSwin-S\n49.3\n-\n81M\n1038G\n15.2\n\n\nUperNet\nSwin-B\n51.6\n-\n121M\n1841G\n8.7\n\n\nUperNet\nSwin-L\n53.5\n62,8\n234M\n3230G\n6.2\n\n\nTable 3. Results of semantic segmentation on the ADE20K val and test set. † indicates additional deconvolution layers are used to produce hierarchical feature maps. ‡ indicates that the model is pre-trained on ImageNet-22K.\nResults Table 3 lists the mIoU, model size (#param), FLOPs and FPS for different method/backbone pairs. From these results, it can be seen that Swin-S is +5.3 mIoU higher (49.3 vs. 44.0) than DeiT-S with similar computation cost. It is also +4.4 mIoU higher than ResNet-101, and +2.4 mIoU higher than ResNeSt-101. Our Swin-L model with ImageNet-22K pre-training achieves 53.5 mIoU on the val set, surpassing the previous best model by +3.2 mIoU (50.3 mIoU by SETR which has a larger model size).\n4.4. Ablation StudyIn this section, we ablate important design elements in the proposed Swin Transformer, using ImageNet-1K image classification, Cascade Mask R-CNN on COCO object detection, and UperNet on ADE20K semantic segmentation.\n\n\n\n\nImageNet top-1\nImageNet top-5\nCOCO \nCOCO \nADE20k mIoU\n\n\n\nw/o shifting\n80.2\n95.1\n47.7\n41.5\n43.3\n\n\nshifted windows\n81.3\n95.6\n50.5\n43.7\n46.1\n\n\nno pos.\n80.1\n94.9\n49.2\n42.6\n43.8\n\n\nabs. pos.\n80.5\n95.2\n49.0\n42.4\n43.2\n\n\nabs.+rel. pos.\n81.3\n95.6\n50.2\n43.4\n44.0\n\n\nrel. pos. w/o app.\n79.3\n94.7\n48.2\n41.9\n44.1\n\n\nrel. pos.\n81.3\n95.6\n50.5\n43.7\n46.1\n\n\nTable 4. Ablation study on the shifted windows approach and different position embedding methods on three benchmarks, using the Swin-T architecture. w/o shifting: all self-attention modules adopt regular window partitioning, without shifting; abs. pos.: absolute position embedding term of ViT; rel. pos.: the default settings with an additional relative position bias term (see Eq. (4)); app.: the first scaled dot-product term in Eq. (4).\n\n\n\nmethod\nS1\nS2\nS3\nS4\nT\nS\nB\n\n\n\nsliding window (naive)\n122.5\n38.3\n12.1\n7.6\n183\n109\n77\n\n\nsliding window (kernel)\n7.6\n4.7\n2.7\n1.8\n488\n283\n187\n\n\nPerformer\n4.8\n2.8\n1.8\n1.5\n638\n370\n241\n\n\nwindow (w/o shifting)\n2.8\n1.7\n1.2\n0.9\n770\n444\n280\n\n\nshifted window (padding)\n3.3\n2.3\n1.9\n2.2\n670\n371\n236\n\n\nshifted window (cyclic)\n3.0\n1.9\n1.3\n1.0\n755\n437\n278\n\n\nTable 5. Real speed of different self-attention computation methods and implementations on a V100 GPU.\nShifted windows Ablations of the shifted window approach on the three tasks are reported in Table 4. Swin-T with the shifted window partitioning outperforms the counterpart built on a single window partitioning at each stage by +1.1% top-1 accuracy on ImageNet-1K, +2.8 box AP/+2.2 mask AP on COCO, and +2.8 mIoU on ADE20K. The results indicate the effectiveness of using shifted windows to build connections among windows in the preceding layers. The latency overhead by shifted window is also small, as shown in Table 5.\nRelative position bias Table 4 shows comparisons of different position embedding approaches. Swin-T with relative position bias yields +1.2%/+0.8% top-1 accuracy on ImageNet-1K, +1.3/+1.5 box AP and +1.1/+1.3 mask AP on COCO, and +2.3/+2.9 mIoU on ADE20K in relation to those without position encoding and with absolute position embedding, respectively, indicating the effectiveness of the relative position bias. Also note that while the inclusion of absolute position embedding improves image classification accuracy (+0.4%), it harms object detection and semantic segmentation (-0.2 box/mask AP on COCO and -0.6 mIoU on ADE20K).\nWhile the recent ViT/DeiT models abandon translation invariance in image classification even though it has long been shown to be crucial for visual modeling, we find that inductive bias that encourages certain translation invariance is still preferable for general-purpose visual modeling, particularly for the dense prediction tasks of object detection and semantic segmentation.\nDifferent self-attention methods The real speed of different self-attention computation methods and implementations are compared in Table 5. Our cyclic implementation is more hardware efficient than naive padding, particularly for deeper stages. Overall, it brings a 13%, 18% and 18% speed-up on Swin-T, Swin-S and Swin-B, respectively.\nThe self-attention modules built on the proposed shifted window approach are 40.8×/2.5×, 20.2×/2.5×, 9.3×/2.1×, and 7.6×/1.8× more efficient than those of sliding windows in naive/kernel implementations on four network stages, respectively. Overall, the Swin Transformer architectures built on shifted windows are 4.1/1.5, 4.0/1.5, 3.6/1.5 times faster than variants built on sliding windows for Swin-T, Swin-S, and Swin-B, respectively. Table 6 compares their accuracy on the three tasks, showing that they are similarly accurate in visual modeling.\nCompared to Performer, which is one of the fastest Transformer architectures (see), the proposed shifted window based self-attention computation and the overall Swin Transformer architectures are slightly faster (see Table 5), while achieving +2.3% top-1 accuracy compared to Performer on ImageNet-1K using Swin-T (see Table 6).\n5. ConclusionThis paper presents Swin Transformer, a new vision Transformer which produces a hierarchical feature representation and has linear computational complexity with respect to input image size. Swin Transformer achieves the state-of-the-art performance on COCO object detection and ADE20K semantic segmentation, significantly surpassing previous best methods. We hope that Swin Transformer’s strong performance on various vision problems will encourage unified modeling of vision and language signals.\nAs a key element of Swin Transformer, the shifted window based self-attention is shown to be effective and efficient on vision problems, and we look forward to investigating its use in natural language processing as well.\n","categories":["Paper Reading"]}]