[{"title":"Generative Adversarial Nets","url":"/2020/08/03/Generative-Adversarial-Nets/","content":"Generative Adversarial Nets\nauthor: Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, Yoshua Bengio\nAbstract\nWe propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model  that captures the data distribution, and a discriminative model  that estimates the probability that a sample came from the training data rather than . The training procedure for  is to maximize the probability of  making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions  and , a unique solution exists, with  recovering the training data distribution and  equal to 21 everywhere. In the case where  and  are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.\n1 Introduction\nThe promise of deep learning is to discover rich, hierarchical models that represent probability distributions over the kinds of data encountered in artificial intelligence applications, such as natural images, audio waveforms containing speech, and symbols in natural language corpora. So far, the most striking successes in deep learning have involved discriminative models, usually those that map a high-dimensional, rich sensory input to a class label. These striking successes have primarily been based on the backpropagation and dropout algorithms, using piecewise linear units  which have a particularly well-behaved gradient . Deep generative models have had less of an impact, due to the difficulty of approximating many intractable probabilistic computations that arise in maximum likelihood estimation and related strategies, and due to difficulty of leveraging the benefits of piecewise linear units in the generative context. We propose a new generative model estimation procedure that sidesteps these difficulties.\nIn the proposed adversarial nets framework, the generative model is pitted against an adversary:a discriminative model that learns to determine whether a sample is from the model distribution or the data distribution. The generative model can be thought of as analogous to a team of counterfeiters, trying to produce fake currency and use it without detection, while the discriminative model is analogous to the police, trying to detect the counterfeit currency. Competition in this game drives both teams to improve their methods until the counterfeits are indistiguishable from the genuine articles.\nThis framework can yield specific training algorithms for many kinds of model and optimization algorithm. In this article, we explore the special case when the generative model generates samples by passing random noise through a multilayer perceptron, and the discriminative model is also a multilayer perceptron. We refer to this special case as adversarial nets. In this case, we can train both models using only the highly successful backpropagation and dropout algorithms and sample from the generative model using only forward propagation. No approximate inference or Markov chains are necessary.\n2 Related work\nAn alternative to directed graphical models with latent variables are undirected graphical models with latent variables, such as restricted Boltzmann machines (RBMs) , deep Boltzmann machines (DBMs) and their numerous variants. The interactions within such models are represented as the product of unnormalized potential functions, normalized by a global summa- tion/integration over all states of the random variables. This quantity (the partition function) and its gradient are intractable for all but the most trivial instances, although they can be estimated by Markov chain Monte Carlo (MCMC) methods. Mixing poses a significant problem for learning algorithms that rely on MCMC.\nDeep belief networks (DBNs) are hybrid models containing a single undirected layer and sev- eral directed layers. While a fast approximate layer-wise training criterion exists, DBNs incur the computational difficulties associated with both undirected and directed models.\nAlternative criteria that do not approximate or bound the log-likelihood have also been proposed, such as score matching and noise-contrastive estimation (NCE). Both of these require the learned probability density to be analytically specified up to a normalization constant. Note that in many interesting generative models with several layers of latent variables (such as DBNs and DBMs), it is not even possible to derive a tractable unnormalized probability density. Some models such as denoising auto-encoders and contractive autoencoders have learning rules very similar to score matching applied to RBMs. In NCE, as in this work, a discriminative training criterion is employed to fit a generative model. However, rather than fitting a separate discriminative model, the generative model itself is used to discriminate generated data from samples a fixed noise distribution. Because NCE uses a fixed noise distribution, learning slows dramatically after the model has learned even an approximately correct distribution over a small subset of the observed variables.\nFinally, some techniques do not involve defining a probability distribution explicitly, but rather train a generative machine to draw samples from the desired distribution. This approach has the advantage that such machines can be designed to be trained by back-propagation. Prominent recent work in this area includes the generative stochastic network (GSN) framework , which extends generalized denoising auto-encoders: both can be seen as defining a parameterized Markov chain, i.e., one learns the parameters of a machine that performs one step of a generative Markov chain. Compared to GSNs, the adversarial nets framework does not require a Markov chain for sampling. Because adversarial nets do not require feedback loops during generation, they are better able to leverage piecewise linear units , which improve the performance of backpropagation but have problems with unbounded activation when used ina feedback loop. More recent examples of training a generative machine by back-propagating into it include recent work on auto-encoding variational Bayes and stochastic backpropagation.\n3 Adversarial nets\nThe adversarial modeling framework is most straightforward to apply when the models are both multilayer perceptrons. To learn the generator’s distribution pg over data , we define a prior on input noise variables , then represent a mapping to data space as , where  is a differentiable function represented by a multilayer perceptron with parameters  . We also define a second multilayer perceptron  that outputs a single scalar.  represents the probability that x came from the data rather than . We train  to maximize the probability of assigning the correct label to both training examples and samples from . We simultaneously train  to minimize :\nIn other words,  and  play the following two-player minimax game with value function :\n$\\min {G} \\max {D} V(D, G)=\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}(\\boldsymbol{x})}[\\log D(\\boldsymbol{x})]+\\mathbb{E}{\\boldsymbol{z} \\sim p{\\boldsymbol{z}}(\\boldsymbol{z})}[\\log (1-D(G(\\boldsymbol{z})))]$\nIn the next section, we present a theoretical analysis of adversarial nets, essentially showing that the training criterion allows one to recover the data generating distribution as  and  are given enough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical explanation of the approach. In practice, we must implement the game using an iterative, numerical approach. Optimizing  to completion in the inner loop of training is computationally prohibitive, and on finite datasets would result in overfitting. Instead, we alternate between  steps of optimizing  and one step of optimizing . This results in  being maintained near its optimal solution, so long as  changes slowly enough. This strategy is analogous to the way that SML/PCD training maintains samples from a Markov chain from one learning step to the next in order to avoid burning in a Markov chain as part of the inner loop of learning. The procedure is formally presented in Algorithm 1.\nIn practice, equation 1 may not provide sufficient gradient for  to learn well. Early in learning, when  is poor,  can reject samples with high confidence because they are clearly different from the training data. In this case,  saturates. Rather than training  to minimize  we can train  to maximize . This objective function results in the same fixed point of the dynamics of  and  but provides much stronger gradients early in learning.\n \nFigure 1: Generative adversarial nets are trained by simultaneously updating the discriminative distribution (, blue, dashed line) so that it discriminates between samples from the data generating distribution (black, dotted line)  from those of the generative distribution  (green, solid line). The lower horizontal line is the domain from which  is sampled, in this case uniformly. The horizontal line above is part of the domain of . The upward arrows show how the mapping  imposes the non-uniform distribution  on transformed samples.  contracts in regions of high density and expands in regions of low density of  . (a) Consider an adversarial pair near convergence:  is similar to pdata and  is a partially accurate classifier. (b) In the inner loop of the algorithm  is trained to discriminate samples from data, converging to . © After an update to , gradient of  has guided  to flow to regions that are more likely  to be classified as data. (d) After several steps of training, if  and  have enough capacity, they will reach a point at which both cannot improve because . The discriminator is unable to differentiate between the two distributions, i.e. .\n4 Theoretical Results\nThe generator  implicitly defines a probability distribution  as the distribution of the samples  obtained when . Therefore, we would like Algorithm 1 to converge to a good estimator of , if given enough capacity and training time. The results of this section are done in a nonparametric setting, e.g. we represent a model with infinite capacity by studying convergence in the space of probability density functions.\nWe will show in section 4.1 that this minimax game has a global optimum for . We will then show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.\n\n\n\nAlgorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of steps to apply to the discriminator, k, is a hyperparameter. We used k = 1, the least expensive option, in our experiments.\n\n\n\n\nfor number of training iterations do    for k steps do        • Sample minibatch of m noise samples Missing or unrecognized delimiter for \\left\\left{\\boldsymbol{z}^{(1)}, \\ldots, \\boldsymbol{z}^{(m)}\\right} from noise prior .        • Sample minibatch of m examples Missing or unrecognized delimiter for \\left\\left{\\boldsymbol{x}^{(1)}, \\ldots, \\boldsymbol{x}^{(m)}\\right} from data generating distribution        • Update the discriminator by ascending its stochastic gradient:            end for    • Sample minibatch of m noise samples Missing or unrecognized delimiter for \\left\\left{\\boldsymbol{z}^{(1)}, \\ldots, \\boldsymbol{z}^{(m)}\\right} from noise prior .    • Update the generator by descending its stochastic gradient:    end forThe gradient-based updates can use any standard gradient-based learning rule. We used momentum in our experiments.\n\n\n\n4.1 Global Optimality of \nWe first consider the optimal discriminator D for any given generator G.\nProposition 1. For G fixed, the optimal discriminator D is\n\nProof. The training criterion for the discriminator D, given any generator G, is to maximize the quantity V (G, D)\n\nFor any , the function  achieves its maximum in [0,1] at a . The discriminator does not need to be defined outside of , concluding the proof.\nNote that the training objective for  can be interpreted as maximizing the log-likelihood for estimating the conditional probability , where  indicates whether  comes from  (with ) or from  (with ). The minimax game in Eq. 1 can now be reformulated as:\n$\\begin{aligned} C(G) &amp;=\\max {D} V(G, D) \\ &amp;=\\mathbb{E}{\\boldsymbol{x} \\sim p_{\\text {data }}}\\left[\\log D_{G}^{}(\\boldsymbol{x})\\right]+\\mathbb{E}{\\boldsymbol{z} \\sim p{\\boldsymbol{z}}}\\left[\\log \\left(1-D_{G}^{}(G(\\boldsymbol{z}))\\right)\\right] \\ &amp;\\left.=\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}} \\log D_{G}^{}(\\boldsymbol{x})\\right]+\\mathbb{E}{\\boldsymbol{x} \\sim p{g}}\\left[\\log \\left(1-D_{G}^{}(\\boldsymbol{x})\\right)\\right] \\ &amp;=\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}}\\left[\\log \\frac{p_{\\text {data }}(\\boldsymbol{x})}{P_{\\text {data }}(\\boldsymbol{x})+p_{g}(\\boldsymbol{x})}\\right]+\\mathbb{E}{\\boldsymbol{x} \\sim p{g}}\\left[\\log \\frac{p_{g}(\\boldsymbol{x})}{p_{\\text {data }}(\\boldsymbol{x})+p_{g}(\\boldsymbol{x})}\\right] \\end{aligned}$\nTheorem 1. The global minimum of the virtual training criterion  is achieved if and only if . Atthatpoint,*C(G)*achieves the value .\nProof. For  ,  , (consider Eq. 2). Hence, by inspecting Eq. 4 at , we find . To see that this is the best possible value of , reached only for , observe that\n$\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}}[-\\log 2]+\\mathbb{E}{\\boldsymbol{x} \\sim p{g}}[-\\log 2]=-\\log 4$\nand that by subtracting this expression from , we obtain:\n\nwhere KL is the Kullback–Leibler divergence. We recognize in the previous expression the Jensen Shannon divergence between the model’s distribution and the data generating process:\n\nSince the Jensen–Shannon divergence between two distributions is always non-negative and zero only when they are equal, we have shown that  is the global minimum of  and that the only solution is ,i.e.,the generative model perfectly replicating the data generating process.\n4.2 Convergence of Algorithm 1\nProposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator is allowed to reach its optimum given G*, and*  is updated so as to improve the criterion\n$\\mathbb{E}{\\boldsymbol{x} \\sim p{\\text {data }}}\\left[\\log D_{G}^{}(\\boldsymbol{x})\\right]+\\mathbb{E}{\\boldsymbol{x} \\sim p{g}}\\left[\\log \\left(1-D_{G}^{}(\\boldsymbol{x})\\right)\\right]$\nthen  converges to \nProof. Consider  as a function of pg as done in the above criterion. Note that  is convex in pg. The subderivatives of a supremum of convex functions include the derivative of the function at the point where the maximum is attained. In other words, if  and  is convex in x for every , then  if . This is equivalent to computing a gradient descent update for pg at the optimal  given the corresponding .  is convex in  with a unique global optima as proven in Thm 1, therefore with sufficiently small updates of ,  converges to , concluding the proof.\nIn practice, adversarial nets represent a limited family of  distributions via the function , and we optimize  rather than  itself. Using a multilayer perceptron to define  introduces multiple critical points in parameter space. However, the excellent performance of multilayer perceptrons in practice suggests that they are a reasonable model to use despite their lack of theoretical guarantees.\n5 Experiments\nWe trained adversarial nets an a range of datasets including MNIST, the Toronto Face Database (TFD), and CIFAR-10. The generator nets used a mixture of rectifier linear activations and sigmoid activations, while the discriminator net used maxout activations. Dropout was applied in training the discriminator net. While our theoretical framework permits the use of dropout and other noise at intermediate layers of the generator, we used noise as the input to only the bottommost layer of the generator network.\nWe estimate probability of the test set data under pg by fitting a Gaussian Parzen window to the samples generated with G and reporting the log-likelihood under this distribution. The σ parameter of the Gaussians was obtained by cross validation on the validation set. This procedure was intro- duced in Breuleux et al. and used for various generative models for which the exact likelihood is not tractable [25, 3, 5]. Results are reported in Table 1. This method of estimating the likelihood has somewhat high variance and does not perform well in high dimensional spaces but it is the best method available to our knowledge. Advances in generative models that can sample but not estimate likelihood directly motivate further research into how to evaluate such models.\n\n\n\nModel\nMNIST\nTFD\n\n\n\n\nDBN\n138 ± 2\n1909 ± 66\n\n\nStacked CAE\n121 ± 1.6\n2110 ± 50\n\n\nDeep GSN\n214 ± 1.1\n1890 ± 29\n\n\nAdversarial nets\n225 ± 2\n2057 ± 26\n\n\n\nTable 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean log- likelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we computed the standard error across folds of the dataset, with a different σ chosen using the validation set of each fold. On TFD, σ was cross validated on each fold and mean log-likelihood on each fold were computed. For MNIST we compare against other models of the real-valued (rather than binary) version of dataset.\nIn Figures 2 and 3 we show samples drawn from the generator net after training. While we make no claim that these samples are better than samples generated by existing methods, we believe that these samples are at least competitive with the better generative models in the literature and highlight the potential of the adversarial framework.\n\nFigure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of the neighboring sample, in order to demonstrate that the model has not memorized the training set. Samples are fair random draws, not cherry-picked. Unlike most other visualizations of deep generative models, these images show actual samples from the model distributions, not conditional means given samples of hidden units. Moreover, these samples are uncorrelated because the sampling process does not depend on Markov chain mixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator and “deconvolutional” generator)\n\nFigure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.\n\n\n\n\nDeep directed graphical models\nDeep undirected graphical models\nGenerative autoencoders\nAdversarial models\n\n\n\n\nTraining\nInference needed during training.\nInference needed during training. MCMC needed to approximate partition function gradient.\nEnforced tradeoff between mixing and power of reconstruction generation\nSynchronizing the discriminator with the generator. Helvetica.\n\n\nInference\nLearned approximate inference\nVariational inference\nMCMC-based inference\nLearned approximate inference\n\n\nSampling\nNo difficulties\nRequires Markov chain\nRequires Markov chain\nNo difficulties\n\n\nEvaluating p(x)\nIntractable, may be approximated with AIS\nIntractable, may be approximated with AIS\nNot explicitly represented, may be approximated with Parzen density estimation\nNot explicitly represented, may be approximated with Parzen density estimation\n\n\nModel design\nNearly all models  incur extreme\nCareful design needed to ensure multiple properties\nAny differentiable function is theoretically permitted\nAny differentiable function is theoretically permitted\n\n\n\nTable 2: Challenges in generative modeling: a summary of the difficulties encountered by different approaches to deep generative modeling for each of the major operations involving a model.\n6 Advantages and disadvantages\nThis new framework comes with advantages and disadvantages relative to previous modeling frame- works. The disadvantages are primarily that there is no explicit representation of , and that  must be synchronized well with  during training (in particular,  must not be trained too much without updating , in order to avoid “the Helvetica scenario” in which  collapses too many values of  to the same value of  to have enough diversity to model pdata), much as the negative chains of a Boltzmann machine must be kept up to date between learning steps. The advantages are that Markov chains are never needed, only backprop is used to obtain gradients, no inference is needed during learning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes the comparison of generative adversarial nets with other generative modeling approaches.\nThe aforementioned advantages are primarily computational. Adversarial models may also gain some statistical advantage from the generator network not being updated directly with data examples, but only with gradients flowing through the discriminator. This means that components of the input are not copied directly into the generator’s parameters. Another advantage of adversarial net- works is that they can represent very sharp, even degenerate distributions, while methods based on Markov chains require that the distribution be somewhat blurry in order for the chains to be able to mix between modes.\n7 Conclusions and future work\nThis framework admits many straightforward extensions:\n\nA conditional generative model  can be obtained by adding c as input to both  and .\nLearned approximate inference can be performed by training an auxiliary network to predict  given . This is similar to the inference net trained by the wake-sleep algorithm but with the advantage that the inference net may be trained for a fixed generator net after the generator net has finished training.\nOne can approximately model all conditionals  where  is a subset of the indices of  by training a family of conditional models that share parameters. Essentially, one can use adversarial nets to implement a stochastic extension of the deterministic MP-DBM.\nSemi-supervised learning: features from the discriminator or inference net could improve perfor- mance of classifiers when limited labeled data is available.\nEfficiency improvements: training could be accelerated greatly by divising better methods for coordinating  and  or determining better distributions to sample  from during training.\n\nThis paper has demonstrated the viability of the adversarial modeling framework, suggesting that these research directions could prove useful.\n","categories":["Paper Reading"]}]